{"version":3,"sources":["firebase.js","AuthProvider.js","components/VideoCard.jsx","components/home.jsx","components/Login.jsx","components/Profile.jsx","App.js","index.js"],"names":["firebase","initializeApp","config","provider","auth","GoogleAuthProvider","firestore","storage","authContext","createContext","AuthProvider","props","useState","user","setUser","loading","setLoading","useEffect","onAuthStateChanged","a","displayName","email","uid","photoURL","docRef","collection","doc","get","exists","set","Provider","value","children","VideoCard","currUserLiked","useContext","playing","setPlaying","currUserComment","setcurrUserComment","commentBoxOpen","setcommentBoxOpen","Allcomments","setAllComments","data","likes","includes","commentsArr","comments","arr","i","length","commentDoc","push","f","className","name","class","onClick","e","likesArr","newLikesArr","id","update","map","el","alt","src","photo","comment","type","onChange","currentTarget","add","commentId","postDoc","postCommentsArr","pause","play","loop","url","Home","posts","setPosts","onSnapshot","querySnapshot","docArr","docs","to","signOut","videoObj","files","size","alert","split","uploadTask","ref","Date","now","put","on","snapshot","getDownloadURL","then","console","log","Login","signInWithPopup","Profile","totalPosts","setTotalPosts","where","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a445621c.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\nimport \"firebase/firestore\"\r\nimport \"firebase/storage\"; \r\nimport config from \"./config.json\"\r\n\r\n// it connects our react app with firebase \r\n//tells firebase about about our project\r\n  firebase.initializeApp(config);\r\n   \r\n  //flag => using google\r\n  let provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  //object jiske ander login/logout/signup \r\n  export const auth = firebase.auth();\r\n\r\n  //it is used to use firestore(database) of firebase in our project \r\n  export const firestore = firebase.firestore();\r\n\r\n  //it is used to use storage feature of firebase\r\n  export const storage = firebase.storage();\r\n\r\n  export const signInWithGoogle = () => {\r\n    \r\n    //ki muje popup ko use krke sign up krna with google\r\n    auth.signInWithPopup(provider);\r\n  };\r\n\r\n  \r\n  export default firebase;","import { createContext, useEffect, useState } from \"react\";\r\nimport { auth, firestore } from \"./firebase\";\r\n\r\nexport const authContext = createContext();\r\n\r\n//when the user has logined so onAuthStateChanged eventlistener get called and function inside it get called\r\n//using setUser of useState we update user state by assigning it with users details\r\n//after this loading is set to false\r\n//as state is changed so rerender occurs\r\n//authContext.Provider will come in action and pass user state to its child componenet\r\n//and as user has logined so loading is also false and authprovider has childern so it show its children\r\n//we have created a context for user as it is used in child componenet home and login\r\n\r\n\r\nlet AuthProvider = (props) =>{\r\n\r\n    let [user, setUser] = useState(null);\r\n\r\n    //user login kar rha he tho loading true\r\n    //user login hone ke badh loading false ya logout ke badh\r\n    let [loading, setLoading] = useState(true);\r\n\r\n     //it is case 1 of useEffect which only executes on first render\r\n     useEffect(() => {\r\n        \r\n         //onAuthStateChanged is eventlistener which exectues the given function when authorisation of user changes\r\n         //when user login it prints user details like email,profile pic(when we login we receive a object which have user data)\r\n         //when user logout so there is no user so it prints null\r\n\r\n        auth.onAuthStateChanged( async (user) => {\r\n          \r\n            //if i have a user\r\n        if(user){//login hoga tho ye chalegha \r\n            let {displayName, email, uid, photoURL } = user;\r\n\r\n            //this give us reference to that particular id(this id is unique for every google account signup) in users collection\r\n          \r\n            // we get a document object with uid in \"users\" collection\r\n            let docRef = firestore.collection(\"users\").doc(uid);\r\n\r\n            // .get() is promise based function so using await\r\n            //.get() data at that time\r\n             \r\n            //here we get a encapsulated object using .get()\r\n            let documentSnapshot = await docRef.get();\r\n             \r\n            //if that data doesnot exist so we set the data object\r\n            \r\n            //if there was no such document object with uid so firebase creates a fake one\r\n            //.exisits help us to know that the object is fake or not\r\n            if(!documentSnapshot.exists){\r\n                //if fake we override fake values with real ones using .set()\r\n                docRef.set({\r\n                    displayName,\r\n                    email,\r\n                    photoURL\r\n                });\r\n            } \r\n\r\n\r\n            setUser({displayName, email, uid, photoURL});\r\n        }\r\n        else{//logout hoga tho ye chalega\r\n            setUser(null);\r\n        }\r\n          \r\n        setLoading(false);\r\n         \r\n       });\r\n       \r\n      \r\n    \r\n   } ,[])\r\n\r\n\r\n   return(\r\n\r\n      // !loading ka matlab ya user ne login karchuka he ya logout kar chuka he tho uske childern dikha do \r\n      // children \"home\" aur \"login\" hote he\r\n\r\n       <authContext.Provider value = {user}>\r\n       {/* jab loading false he tho AuthProvider ke childern dikha do agar uske chidren he tho*/}\r\n           \r\n           \r\n           {!loading && props.children}  \r\n\r\n       </authContext.Provider>\r\n   )\r\n\r\n}\r\n\r\nexport default AuthProvider;","// eslint-disable-next-line\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport \"./videoCard.css\";\r\nimport { authContext } from \"../AuthProvider\"\r\nimport { firestore } from \"../firebase\";\r\n\r\n\r\n\r\nlet VideoCard = (props) => {\r\n\r\n    let user = useContext(authContext);\r\n\r\n    let [playing , setPlaying] = useState(false);\r\n\r\n     let [currUserComment, setcurrUserComment] = useState(\"\");\r\n\r\n     let [commentBoxOpen, setcommentBoxOpen] = useState(false);\r\n\r\n     let [Allcomments, setAllComments] = useState([]);\r\n\r\n     let currUserLiked;\r\n\r\n     if(user){\r\n         currUserLiked = props.data.likes.includes(user.uid);\r\n     }\r\n\r\n     useEffect(() => {\r\n           let f = async () =>{\r\n               \r\n            let commentsArr = props.data.comments;\r\n\r\n            let arr = [];\r\n            \r\n            for (let i = 0; i < commentsArr.length; i++) {\r\n\r\n                let commentDoc = await firestore.collection(\"comments\").doc(commentsArr[i]).get();\r\n                \r\n                arr.push(commentDoc.data());\r\n            }\r\n\r\n            setAllComments(arr);\r\n\r\n           }      \r\n\r\n\r\n        f();\r\n     },[props])\r\n     \r\n    return(\r\n        <div className =\"video-card\">\r\n         \r\n           <p className =\"video-card-username\">{props.data.name}</p>\r\n           \r\n           <span className=\"video-card-music\">\r\n            <span class=\"material-icons\">music_note</span>\r\n            \r\n            <marquee>some song</marquee>\r\n            \r\n           </span>\r\n\r\n           <span class=\"material-icons-outlined video-card-comment\"\r\n            onClick ={\r\n               (e)=>{\r\n                   if(commentBoxOpen){\r\n                       setcommentBoxOpen(false);\r\n                   }\r\n                   else{\r\n                       setcommentBoxOpen(true);\r\n                   }\r\n               }\r\n            }\r\n         \r\n           >chat</span>\r\n\r\n            <span class=\"material-icons-outlined video-card-like\"\r\n                onClick = {\r\n                    \r\n                    () => {\r\n                        let likesArr = props.data.likes; \r\n\r\n                        if (currUserLiked){\r\n                           let newLikesArr = [];\r\n\r\n                           for(let i=0;i<likesArr.length;i++){\r\n                               if(likesArr[i] !== user.uid){\r\n                                   newLikesArr.push(likesArr[i]);\r\n                               }\r\n                           }\r\n\r\n                           likesArr = newLikesArr; \r\n                        }\r\n                        else{\r\n                             likesArr.push(user.uid);\r\n                        }\r\n\r\n                         firestore.collection(\"posts\").doc(props.data.id).update({\r\n                             likes: likesArr,\r\n                         })    \r\n\r\n                    }\r\n                }\r\n\r\n                >\r\n                {currUserLiked ? \"favorite\" : \"favorite_border\"} \r\n               \r\n            </span> \r\n\r\n            {commentBoxOpen ? (\r\n\r\n              <div className =\"video-card-comment-box\">\r\n\r\n\r\n                 <div className = \"actual-comments\">\r\n                   \r\n                      {\r\n                          Allcomments.map((el) => {\r\n                           \r\n                           return <div className = \"post-user-comment\">\r\n                                 <img alt=\"\" src= { el.photo } /> \r\n                      \r\n                                <div>   \r\n                                    <h5>{ el.name }</h5>\r\n                                    <p>{ el.comment }</p>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            \r\n                          })\r\n                      }\r\n\r\n                 \r\n                 </div>\r\n\r\n                 <div className=\"comment-form\">\r\n                 {/* jobhi mai input tag me likhunga wo meri state me save hota rahega  */}\r\n                     <input type=\"text\" \r\n                            value = {currUserComment}\r\n                            onChange = {\r\n                                (e)=>{\r\n                               setcurrUserComment(e.currentTarget.value);\r\n                            }\r\n                        }                      \r\n                     />\r\n                     <button\r\n                            onClick = {\r\n                               async ()=>{\r\n                                  //jo current comment state me hai use comments collection me add kr rha hu \r\n                                  let docRef = await firestore.collection(\"comments\").add({\r\n                                       name: user.displayName,\r\n                                       comment: currUserComment,\r\n                                       photo : user.photoURL,\r\n                                   })\r\n                                \r\n                                //taki comment post karne ke badh inpput box empty ho jaye\r\n                                setcurrUserComment(\"\");\r\n\r\n                                //to jo abhi comment maine add kra hai uske document ke ref se wo comment ka document nikal lo  \r\n                                let doc = await docRef.get();\r\n\r\n                                //us document ki id nikal lo \r\n                                let commentId = doc.id;\r\n \r\n                                 //ye jo video card hai jisme ye comment dal rha he uske document nikalo \r\n                                let postDoc = await firestore.collection(\"posts\").doc(props.data.id).get(); \r\n\r\n                                 //us document me comment array hai whapr jo apne apni comment add kra h uski id insert krdo\r\n                                let postCommentsArr = postDoc.data().comments;\r\n\r\n                                 postCommentsArr.push(commentId);\r\n\r\n                                 // ab ye comments array firestore jakr update krdo posts collection me\r\n                                 await firestore.collection(\"posts\").doc(props.data.id).update({\r\n                                     comments : postCommentsArr,\r\n                                 })\r\n                                 \r\n\r\n                                }\r\n                            }  \r\n                     \r\n                     >\r\n                     Post</button>  \r\n                 </div>\r\n\r\n               </div>\r\n             ):\r\n             (\"\")\r\n             }\r\n\r\n\r\n              <video \r\n                    onClick ={\r\n                        (e) => {\r\n                            if(playing){\r\n                                e.currentTarget.pause();\r\n                                setPlaying(false);\r\n                            }\r\n                            else{\r\n                                e.currentTarget.play();\r\n                                setPlaying(true);\r\n                            }\r\n                        }\r\n                    }\r\n                 loop\r\n               src = {props.data.url}\r\n               className=\"video-card-video\"\r\n              >\r\n\r\n\r\n\r\n              </video>            \r\n\r\n        </div> \r\n    );\r\n\r\n};\r\n\r\nexport default VideoCard;\r\n\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { authContext } from \"../AuthProvider\";\r\nimport { auth, storage ,firestore} from \"../firebase\";\r\nimport VideoCard from \"./VideoCard\";\r\n\r\n\r\n\r\nimport \"./home.css\";\r\n\r\nlet Home = () => {\r\n  \r\n  let user = useContext(authContext);\r\n  let [posts,setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n   \r\n    // onSnapshot is EventListener which is used when there is change in posts collection data so it execute the given function\r\n    firestore.collection(\"posts\").onSnapshot((querySnapshot) =>{\r\n      // querySnapshot is the snapshot of all document in posts\r\n\r\n      //it bring all object in posts collection \r\n      let docArr = querySnapshot.docs; //it is the data present in posts collection\r\n\r\n       let arr = [];\r\n      // here we take put post data from database and store it in array to pass it to VideoCard\r\n       for (let i = 0; i < docArr.length; i++) {\r\n        \r\n         arr.push({\r\n           id: docArr[i].id,\r\n           ...docArr[i].data()//give data of single document\r\n         })\r\n        \r\n       }\r\n         \r\n       setPosts(arr);\r\n    })\r\n\r\n\r\n  },[])\r\n \r\n\r\n  \r\n  return(\r\n     <>\r\n      {/* agar user nhi he tho mujhe login par Redirect kardo */}\r\n      {/* if user is null and does not have user object so Redirect to login */}\r\n\r\n      { user ? \"\" : <Redirect to = \"/login\" /> }\r\n\r\n     <div className = \"video-container\">\r\n             \r\n             {/* videoCard ko data pass kardiya jisme uploaded video ki details he */}\r\n             {posts.map((el)=>{\r\n                 return <VideoCard key = {el.id} data = {el} />\r\n             })\r\n\r\n             } \r\n          \r\n     </div>\r\n     \r\n     <button \r\n            className = \"home-logout-btn\"\r\n            onClick = {\r\n              //auth.signOut() is used to signout from any platform\r\n                () => {\r\n                    auth.signOut();\r\n                }\r\n            }>\r\n              <span class=\"material-icons ds\">\r\n                logout\r\n             </span>\r\n         </button>\r\n\r\n\r\n         <Link to = \"/Profile\">\r\n            <button id=\"profile\"><span class=\"material-icons sd\"> \r\n                                      account_circle\r\n                                 </span> \r\n            </button>\r\n         </Link>\r\n\r\n        \r\n         <input\r\n            className = \"dfg\"\r\n            type=\"file\"//for inputting a file\r\n\r\n             //e.currentTarget.value = null-> THIS IS DONE NULL BECAUSE IF USER UPLOAD SAME NAME VIDEO AGAIN SO HE CAN UPLOAD THE  SAME VIDEO AGAIN\r\n             //AS INPUT COMPARES NEW FILE NAME WITH PREVIOUS ONE\r\n            onClick = {\r\n              (e) => {\r\n                e.currentTarget.value = null;\r\n              }\r\n            }  \r\n\r\n            onChange = {\r\n\r\n              (e) => {\r\n                 let videoObj = e.currentTarget.files[0];//e.currentTarget.files gives file object and zero element of that object gives that files we uploaded\r\n\r\n                 let {name , size, type} = videoObj;//that file has many property as name,size,type in object form so we stored particular property of that video in videoObj object\r\n\r\n                 size = size / 1000000;\r\n\r\n                if (size > 10) {\r\n                  alert(\"file size exceeds 10mb\");//as we dont want a video greater than 10 mb to be uploaded\r\n                  return;\r\n                }\r\n\r\n                type = type.split(\"/\")[0];\r\n\r\n                if (type !== \"video\") {\r\n                  alert(\"Please upload a video file\");//as we dont want a file other than \"video\" type to be uploaded\r\n                  return;\r\n                } \r\n                \r\n                //SO HERE WE BRING REFERENCE OF THE LOCATION WHERE WE WANT TO STORE THE VIDEO AND PUT THE THE VIDEO THERE\r\n                //WE USE USER.UID TO IDENTIFY WHICH USER UPLOADED WHICH VIDEO\r\n                //WE USE .PUT() METHOD TO UPLOAD VIDEO IN STORAGE\r\n                let uploadTask = storage.ref(`/posts/${user.uid}/${Date.now() + \"-\" + name}`).put(videoObj);\r\n\r\n                // .on() is a eventlistener where \"state_changed\" is event \r\n                // where when the event is changed so these function exectues\r\n                // first function tell progress of event\r\n                // second function tell error if event fails\r\n                // third function is exectues after event is done  \r\n\r\n                uploadTask.on(\"state_changed\", ()=>{}, ()=>{}, () => { \r\n                   \r\n                  // getDownloadURL() gives url of that uploaded video \r\n                  // it is a promise based so use .then() when promise is resolved so we do something with that url\r\n                  \r\n                    uploadTask.snapshot.ref.getDownloadURL().then((url) => {\r\n                       console.log(url);\r\n                       \r\n                       //user ki uploaded video li details ko database me dal diya gya \r\n                       firestore.collection(\"posts\").add({\r\n                         name: user.displayName,\r\n                         url,\r\n                         likes: [],\r\n                         comments: [],\r\n                       })\r\n\r\n                    })\r\n                }) \r\n\r\n              }\r\n            }\r\n          \r\n         />\r\n  \r\n\r\n     </> \r\n  )\r\n  \r\n};\r\n  \r\n  export default Home;","import { useContext} from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { authContext } from \"../AuthProvider\";\r\nimport {signInWithGoogle} from \"../firebase\"\r\n\r\n//after we click on google button the signInWithGoogle() gets called \r\n//the signInWithGoogle() function opens google in pop up for login option\r\n\r\nlet Login = () => {\r\n\r\n  let user = useContext(authContext);\r\n      \r\n   return(\r\n     <>\r\n       {/* when login with google button is clicked  signInWithGoogle() function is called which opens a popup for google signup */}\r\n        \r\n        {/* agar user he tho mujhe home par Redirect kardo */}\r\n        {/* if user is not null or it has a user object so Redirect to home  */}\r\n         {user ? <Redirect to =\"/\" /> : \"\"}\r\n\r\n         <button  className=\"btn btn-primary m-4\" \r\n           onClick={                                                                                     \r\n             () => {\r\n                 signInWithGoogle();\r\n             }\r\n           }\r\n         >\r\n\r\n        Login with google\r\n         </button>\r\n\r\n     </>\r\n\r\n\r\n   )\r\n\r\n}\r\n\r\nexport default Login;","import { useContext, useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { authContext } from \"../AuthProvider\"\r\nimport { firestore } from \"../firebase\";\r\n\r\nimport \"./profile.css\";\r\n\r\nlet Profile = () => {\r\n\r\n    let user = useContext(authContext);\r\n\r\n    let [totalPosts, setTotalPosts] = useState(0);\r\n   \r\n     useEffect(() => {\r\n\r\n        let f = async () =>{\r\n           let querySnapshot = await firestore.collection(\"posts\").where(\"name\",\"==\",user.displayName).get();\r\n               \r\n           setTotalPosts(querySnapshot.size);                   \r\n        };\r\n           \r\n           f();\r\n\r\n     }, []);\r\n\r\n      \r\n\r\n    return(\r\n        <>\r\n           <h1 className = \"asd\">PROFILE PAGE</h1>\r\n\r\n           {user ? (\r\n           <div>\r\n            <img className=\"img-profile\" src = {user.photoURL} alt=\"\" />\r\n            <p className=\"username-profile\">{user.displayName}</p>\r\n            <p className=\"ttpost\">Total Posts: {totalPosts}</p>\r\n            </div>\r\n       ) :(<Redirect to=\"/Login\" />)\r\n       }\r\n\r\n       </>  \r\n\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Profile;","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./components/home\";\nimport Login from \"./components/Login\";\nimport Profile from \"./components/Profile\";\n\nimport AuthProvider from \"./AuthProvider\";\nimport { useEffect } from \"react\";\n\n\nlet App= () => {\n  \n  useEffect(() => {\n       \n    //add\n   // firestore.collection(\"users\").add({ body: \"this is val 2\" })\n\n  //  //  get all data in that collections\n  //    async function f() {\n         \n  //     //get() is a promise based function\n          //  firestore.collection(\"users\")-> this line takes me to the \"users\" collection \n          //.get() gives me the all data at that time in \"users\" collection in object form\n\n  //      let querySnapshot = await firestore.collection(\"users\").get();\n             \n          //  querysnapshot.docs is an array of all objects in that \"users\" collection \n  //       for(let i = 0 ; i < querySnapshot.docs.length ; i++){\n           \n             //we use .data() to get data of that object\n  //         console.log(querySnapshot.docs[i].data());\n\n  //       }  \n\n        \n\n  //    }\n  //    f();\n      \n     \n\n\n    //get single\n\n    \n  //   let f = async () => {\n\n  //   //this gives you the ref of that document   (not actual document)  \n  //     let docRef = firestore.collection(\"users\").doc(\"Yn0y1cjISraHa9xngpqr\");\n\n  //     let documentSnapshot = await docRef.get();\n\n  //     console.log(documentSnapshot.exists);\n\n\n  //   }  \n\n  //   f();\n\n   } ,[]) \n\n\n  return (\n    <>\n      \n      <AuthProvider>\n\n        <Router>\n          \n          <Switch>\n          \n          <Route exact path=\"/Login\">\n             <Login />\n          </Route> \n\n          <Route exact path=\"/Profile\">\n             <Profile />\n          </Route> \n\n          <Route exact path=\"/\">\n             <Home />\n          </Route>\n \n          </Switch>\n        \n\n        </Router>\n\n      </AuthProvider>\n      \n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n     <App />\n  ,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}